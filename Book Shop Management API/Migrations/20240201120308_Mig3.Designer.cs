// <auto-generated />
using System;
using Book_Shop_Management_API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Book_Shop_Management_API.Migrations
{
    [DbContext(typeof(BookShoopDBcontext))]
    [Migration("20240201120308_Mig3")]
    partial class Mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DurationDayAvaible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeBookId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("Quantity")
                        .IsUnique();

                    b.HasIndex("TypeBookId");

                    b.ToTable("Book", null, t =>
                        {
                            t.HasCheckConstraint("CH_Quantity", "Quantity >=1 ");
                        });
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.FavoriteBook", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavoriteId");

                    b.ToTable("FavoriteBook", (string)null);
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.Subsecription", b =>
                {
                    b.Property<int>("SubsecriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubsecriptionId"));

                    b.Property<int?>("AdminId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DownloadBookAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationDay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("02/01/2024 15:03:08");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(30f);

                    b.Property<string>("SubsecriptionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubsecriptionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubsecriptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubsecriptionId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Subsecription", null, t =>
                        {
                            t.HasCheckConstraint("CH_DownloadBookAmount", "DownloadBookAmount >=1");
                        });
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.TypeBook", b =>
                {
                    b.Property<int>("TypeBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeBookId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("bookType")
                        .HasColumnType("int");

                    b.HasKey("TypeBookId");

                    b.ToTable("TypeBook", (string)null);
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("Age")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(18);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specilization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("UserTypeID");

                    b.ToTable("User", null, t =>
                        {
                            t.HasCheckConstraint("CH_User_Age", "Age>= 18");

                            t.HasCheckConstraint("CH_User_Email", "EMAIL LIKE '%@___%.COM'");

                            t.HasCheckConstraint("CH_User_Phone", "Phone LIKE '9627________'");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.UserSubsecription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SerialNumberSubsecription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubsecriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubsecriptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubsecriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubsecription", (string)null);
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Usertype")
                        .HasColumnType("int");

                    b.HasKey("UserTypeID");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Admin", b =>
                {
                    b.HasBaseType("Book_Shop_Management_API.Models.Entity.User");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CH_User_Age", "Age>= 18");

                            t.HasCheckConstraint("CH_User_Email", "EMAIL LIKE '%@___%.COM'");

                            t.HasCheckConstraint("CH_User_Phone", "Phone LIKE '9627________'");
                        });

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Client", b =>
                {
                    b.HasBaseType("Book_Shop_Management_API.Models.Entity.User");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CH_User_Age", "Age>= 18");

                            t.HasCheckConstraint("CH_User_Email", "EMAIL LIKE '%@___%.COM'");

                            t.HasCheckConstraint("CH_User_Phone", "Phone LIKE '9627________'");
                        });

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Employee", b =>
                {
                    b.HasBaseType("Book_Shop_Management_API.Models.Entity.User");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CH_User_Age", "Age>= 18");

                            t.HasCheckConstraint("CH_User_Email", "EMAIL LIKE '%@___%.COM'");

                            t.HasCheckConstraint("CH_User_Phone", "Phone LIKE '9627________'");
                        });

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.Book", b =>
                {
                    b.HasOne("Book_Shop_Management_API.Models.Entity.TypeBook", "TypeBook")
                        .WithMany("Books")
                        .HasForeignKey("TypeBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeBook");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.Subsecription", b =>
                {
                    b.HasOne("Book_Shop_Management_API.Models.Entity.User+Admin", "Admin")
                        .WithMany("Subsecriptions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Book_Shop_Management_API.Models.Entity.User+Client", "Client")
                        .WithMany("Subsecriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Book_Shop_Management_API.Models.Entity.User+Employee", "Employee")
                        .WithMany("Subsecriptions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User", b =>
                {
                    b.HasOne("Book_Shop_Management_API.Models.Entity.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.UserSubsecription", b =>
                {
                    b.HasOne("Book_Shop_Management_API.Models.Entity.Subsecription", "Subsecription")
                        .WithMany("UserSubsecriptions")
                        .HasForeignKey("SubsecriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_Shop_Management_API.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subsecription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.Subsecription", b =>
                {
                    b.Navigation("UserSubsecriptions");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.TypeBook", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Admin", b =>
                {
                    b.Navigation("Subsecriptions");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Client", b =>
                {
                    b.Navigation("Subsecriptions");
                });

            modelBuilder.Entity("Book_Shop_Management_API.Models.Entity.User+Employee", b =>
                {
                    b.Navigation("Subsecriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
